apiVersion: v1
kind: Template
metadata:
  name: liferay-on-wildfly-s2i
parameters:
- name: APP_NAME
  required: true
- name: DB_MEMORY_LIMIT
  value: 512Mi
- name: DB_CPU_LIMIT
  value: 300m
- name: LF_MEMORY_LIMIT
  value: 1536Mi
- name: LF_CPU_LIMIT
  value: '2'
- name: LF_VERSION
  description: LifeRay version
  value: '7.0-ga5'
- name: EL_VERSION
  description: Elasticsearch version
  value: '2.4.6'  
- name: LF_BUILD
  description: Build version of Liferay
  value: '20171018150113838'
- name: LF_REPO_PREFIX
  description: LifeRay Mirror URL, for example http://httpd-ex-liferay-distr.apps.172.20.10.5.xip.io/liferay, 
    if blank all resources downloaded from https://sourceforge.net/projects/lportal/files/Liferay%20Portal/7.0.4%20GA5
  value: ''
- name: APP_HOSTNAME
  value: ''
- name: LF_DATASOURCE_NAME
  description: it will be conjunced with 'java:jboss/datasources/', and with name equals 'java:jboss/datasources/${LF_DATASOURCE_NAME}'
  value: LiferayDS
- name: DB_NAME
  required: true
  value: lportal
- name: DB_USER
  required: true
  from: '[a-zA-Z0-9]{16}'
  generate: expression
- name: DB_PASSWORD
  required: true
  from: '[a-zA-Z0-9]{16}'
  generate: expression
- name: S2I_SOURCE_REPO
  value: https://github.com/andreessen/openshift-liferay-example
- name: ELASTIC_SOURCE_REPO
  value: https://github.com/andreessen/openshift-liferay-example  
- name: S2I_SOURCE_REF
  value: wildfly-10
- name: ELASTIC_SOURCE_REF
  value: wildfly-10  
- name: S2I_SOURCE_CONTEXT_DIR
  value: src
- name: ELASTIC_SOURCE_CONTEXT_DIR
  value: elastic
- name: CACHE_JARS_URL
  value: https://github.com/andreessen/openshift-liferay-example/raw/wildfly-10/jars/  
- name: BUILD_STRATEGY
  description: 'It could be two strategies: source or docker'
  from: '[sourcedk]'
  value: source
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    lookupPolicy:
      local: false
    tags:
    - from:
        kind: DockerImage
        name: ${APP_NAME}:latest
      name: latest
      referencePolicy:
        type: ""
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}-elastic
  spec:
    lookupPolicy:
      local: false
    tags:
    - from:
        kind: DockerImage
        name: ${APP_NAME}-elastic:latest
      name: latest
      referencePolicy:
        type: ""
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}-elastic
  spec:
    resources:
      limits:
        memory: 512Mi
        cpu: 500m
      requests:
        memory: 256Mi
        cpu: 200m
    source:
      contextDir: ${ELASTIC_SOURCE_CONTEXT_DIR}
      git:
        ref: ${ELASTIC_SOURCE_REF}
        uri: ${ELASTIC_SOURCE_REPO}
      type: Git
    output:
      to:
        kind: ImageStreamTag
        name: ${APP_NAME}-elastic:latest
    strategy:
      dockerStrategy:
        env:
        - name: EL_VERSION
          value: ${EL_VERSION}
        - name: APP_ROOT
          value: /opt/app-root
        from:
          kind: ImageStreamTag
          name: redhat-openjdk18-openshift:1.2
          namespace: openshift
      type: docker  
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange             
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    resources:
      limits:
        memory: 512Mi
        cpu: 500m
      requests:
        memory: 256Mi
        cpu: 200m
    output:
      to:
        kind: ImageStreamTag
        name: ${APP_NAME}:latest
    source:
      contextDir: ${S2I_SOURCE_CONTEXT_DIR}
      git:
        ref: ${S2I_SOURCE_REF}
        uri: ${S2I_SOURCE_REPO}
      type: Git
    strategy:
      ${BUILD_STRATEGY}Strategy:
        env:
        - name: LF_REPO_PREFIX
          value: ${LF_REPO_PREFIX}
        - name: LF_BUILD
          value: ${LF_BUILD}
        - name: LF_VERSION
          value: ${LF_VERSION}
        - name: APP_ROOT
          value: /opt/app-root/
        - name: ELASTIC_SERVICE_HOST
          value: ${APP_NAME}-elastic
        - name: ELASTIC_SERVICE_PORT
          value: '9300'
        - name: CACHE_JARS_URL
          value: ${CACHE_JARS_URL}
        from:
          kind: ImageStreamTag
          name: wildfly:10.0
          namespace: openshift
      type: ${BUILD_STRATEGY}
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}-elastic
  spec:
    replicas: 1
    selector:
      name: ${APP_NAME}-elastic
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APP_NAME}-elastic
          name: ${APP_NAME}-elastic
      spec:
        containers:
        - env:
          - name: "CLUSTER_NAME"
            value: "myesdb"
          - name: "NUMBER_OF_MASTERS"
            value: "2"
          - name: NODE_MASTER
            value: "true"
          - name: NODE_DATA
            value: "false"
          - name: HTTP_ENABLE
            value: "false"
          - name: ES_HEAP_SIZE
            value: "256m"
          - name: "DISCOVERY_SERVICE"
            value: "${APP_NAME}-elastic-discovery"
          image: ''
          imagePullPolicy: IfNotPresent
          name: ${APP_NAME}-elastic
          ports:
          - containerPort: 9300
            protocol: TCP
          - containerPort: 9200
            protocol: TCP  
          volumeMounts:
          - mountPath: /data
            name: elastic-storage
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: elastic-storage
          persistentVolumeClaim:
            claimName: elastic-storage
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APP_NAME}-elastic
        from:
          kind: ImageStreamTag
          name: ${APP_NAME}-elastic:latest
      type: ImageChange      
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}-mysql
  spec:
    replicas: 1
    selector:
      name: ${APP_NAME}-mysql
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APP_NAME}-mysql
          name: ${APP_NAME}-mysql
      spec:
        containers:
        - env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${APP_NAME}-mysql
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${APP_NAME}-mysql
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-root-password
                name: ${APP_NAME}-mysql
          - name: MYSQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${APP_NAME}-mysql
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3306
            timeoutSeconds: 1
          name: mysql
          ports:
          - containerPort: 3306
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE
                -e 'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${DB_MEMORY_LIMIT}
              cpu: ${DB_CPU_LIMIT}
            requests:
              memory: ${DB_MEMORY_LIMIT}
              cpu: ${DB_CPU_LIMIT}
          volumeMounts:
          - mountPath: /var/lib/mysql/data
            name: ${APP_NAME}-mysql-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: ${APP_NAME}-mysql-data
          persistentVolumeClaim:
            claimName: ${APP_NAME}-mysql
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mysql
        from:
          kind: ImageStreamTag
          name: mysql:5.6
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    replicas: 1
    selector:
      app: ${APP_NAME}
      deploymentconfig: ${APP_NAME}
      liferay: ""
    strategy:
      activeDeadlineSeconds: 21600
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          deploymentconfig: ${APP_NAME}
          liferay: ""
      spec:
        containers:
        - env:
          - name: MYSQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${APP_NAME}-mysql
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${APP_NAME}-mysql
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${APP_NAME}-mysql
          - name: MYSQL_DATASOURCE
            value: ${LF_DATASOURCE_NAME}
          - name: MYSQL_SERVICE_HOST
            value: ${APP_NAME}-mysql
          - name: MYSQL_SERVICE_PORT
            value: '3306'
          - name: ELASTIC_SERVICE_HOST
            value: ${APP_NAME}-elastic
          - name: ELASTIC_SERVICE_PORT
            value: '9300'  
          image: ' '
          imagePullPolicy: Always
          name: ${APP_NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              cpu: ${LF_CPU_LIMIT}
              memory: ${LF_MEMORY_LIMIT}
          volumeMounts:
          - mountPath: /opt/app-root/liferay/portal-ext.properties
            name: portal-ext-props
            subPath: portal-ext.properties
          - mountPath: /opt/app-root/liferay/data
            name: ${APP_NAME}-liferay-data  
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - configMap:
            defaultMode: 420
            name: ${APP_NAME}-portal-ext
          name: portal-ext-props
        - name: ${APP_NAME}-liferay-data
          persistentVolumeClaim:
            claimName: ${APP_NAME}-liferay-data  
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APP_NAME}
        from:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}-elastic
  spec:
    ports:
    - name: ${APP_NAME}-9300-elastic
      port: 9300
      protocol: TCP
      targetPort: 9300
    - name: ${APP_NAME}-9200-elastic
      port: 9200
      protocol: TCP
      targetPort: 9200
    selector:
      name: ${APP_NAME}-elastic
    sessionAffinity: None
    type: ClusterIP      
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}-mysql
  spec:
    ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: 3306
    selector:
      name: ${APP_NAME}-mysql
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${APP_NAME}
      deploymentconfig: ${APP_NAME}
      liferay: ""
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}-mysql
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}-liferay-data
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 2Gi
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: ${APP_NAME}
    name: elastic-storage
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi              
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    host: ${APP_HOSTNAME}
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: ${APP_NAME}
      weight: 100
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}-mysql
  stringData:
    database-name: ${DB_NAME}
    database-password: ${DB_PASSWORD}
    database-root-password: ${DB_PASSWORD}
    database-user: ${DB_USER}
  type: Opaque
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}-portal-ext
  data:
    portal-ext.properties: |
      jdbc.default.jndi.name=java:jboss/datasources/${LF_DATASOURCE_NAME}
      admin.email.from.address=test@liferay.com
      admin.email.from.name=Test Test
      company.default.locale=en_US
      company.default.web.id=liferay.com
      default.admin.email.address.prefix=test
      liferay.home=/opt/app-root/liferay
      setup.wizard.enabled=false
      dl.store.impl=com.liferay.portal.store.file.system.AdvancedFileSystemStore
      cluster.link.enabled=true
      module.framework.properties.lpkg.index.validator.enabled=false
      web.server.display.node=true